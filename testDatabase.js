"use strict";const Database=require("./"),fs=require("fs"),database=new Database(__dirname+"/database");try{new Database(__dirname+"/shouldFail.js"),console.log(new TypeError("new Database() failed")),process.exit(1)}catch(e){}try{const e=new Database(__dirname+"/utils/");fs.unlinkSync(e.filePath),fs.rmdirSync(e.filePath.replace("/database.json",""))}catch(e){console.log(new TypeError("new Database() failed")),process.exit(1)}if(database.filePath!==__dirname+"/database.json")throw new TypeError("FilePath is incorrect");if(2!==database.spaces)throw new TypeError("Spaces is incorrect");database.clear(),database.set("set1","").set("set2",1).set("set3",[]).set("set4",{}).set("set5",null).set("add",1).set("sub",3).set("delete",""),database.add("add").add("add",2),database.sub("sub").sub("sub",2);const deleted=database.delete("delete");if(!deleted||database.has("delete"))throw new TypeError("delete() failed");let listener=()=>{throw new TypeError("Change event fired when not supposed to")};if(database.addListener("change",listener),database.set("set1","").set("set2",1).set("set3",[]).set("set4",{}).set("set5",null).set("set6",void 0),database.delete("delete"),database.add("add",0).sub("sub",0),database.removeListener("change",listener),database.set("set delete test",""),database.set("set delete test",void 0),database.has("set delete test"))throw new TypeError("set() failed");listener=(e=>{if(e!==expectedValue)throw new TypeError(`Value didn't match expected value\nExpected: ${expectedValue}\nRecieved: ${e}`)});let expectedValue="";listener(database.get("set1")),expectedValue=1,listener(database.get("set2")),expectedValue=JSON.stringify([]),listener(JSON.stringify(database.get("set3"))),expectedValue=JSON.stringify({}),listener(JSON.stringify(database.get("set4"))),expectedValue=null,listener(database.get("set5")),expectedValue=void 0,listener(database.get("set6")),expectedValue='{"set1":"","set2":1,"set3":[],"set4":{},"set5":null,"add":4,"sub":0}',listener(JSON.stringify(database.read())),expectedValue=JSON.stringify(database.read(),null,2),listener(database.toString()),database.set("obj",{nest1:{nest2:{value2:"I'm a value!"},value1:"Boo!",duplicateOfValue1:"Boo!"}}),expectedValue=JSON.stringify(database.get("obj")),listener(JSON.stringify(database.find("",e=>e&&e.nest1))),expectedValue=JSON.stringify(database.get("obj.nest1")),listener(JSON.stringify(database.find("obj",e=>e.nest2&&e.nest2.value2))),expectedValue=JSON.stringify([database.get("obj")]),listener(JSON.stringify(database.findAll("",e=>e&&e.nest1))),expectedValue=JSON.stringify([database.get("obj.nest1")]),listener(JSON.stringify(database.findAll("obj",e=>e.nest2&&e.nest2.value2))),expectedValue=JSON.stringify([database.get("obj.nest1.value1"),database.get("obj.nest1.duplicateOfValue1")]),listener(JSON.stringify(database.findAll("obj.nest1",e=>"Boo!"===e))),[1,"1"].forEach(e=>{expectedValue=JSON.stringify(database.read(),null,Number(e)),database.setSpaces(e),listener(database.toString()),expectedValue=Number(e),listener(database.spaces)});let d={str:database.toString(),filePath:database.filePath};if(database.moveTo(__dirname+"/database1"),fs.existsSync(d.filePath))throw new TypeError("moveTo() failed");if(d.str!==database.toString())throw new TypeError("moveTo() failed");if(d={str:database.toString(),filePath:database.filePath},database.moveTo(__dirname+"/database2",!1),!fs.existsSync(d.filePath))throw new TypeError("moveTo() failed");if(d.str!==database.toString())throw new TypeError("moveTo() failed");fs.unlinkSync(database.filePath),fs.unlinkSync(d.filePath),console.log("Database is working properly");
